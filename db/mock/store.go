// Code generated by MockGen. DO NOT EDIT.
// Source: myclass/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "myclass/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatePhone mocks base method.
func (m *MockStore) CreatePhone(arg0 context.Context, arg1 db.CreatePhoneParams) (db.Phone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhone", arg0, arg1)
	ret0, _ := ret[0].(db.Phone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePhone indicates an expected call of CreatePhone.
func (mr *MockStoreMockRecorder) CreatePhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhone", reflect.TypeOf((*MockStore)(nil).CreatePhone), arg0, arg1)
}

// CreateProfessionalInformation mocks base method.
func (m *MockStore) CreateProfessionalInformation(arg0 context.Context, arg1 db.CreateProfessionalInformationParams) (db.ProfessionalInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfessionalInformation", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfessionalInformation indicates an expected call of CreateProfessionalInformation.
func (mr *MockStoreMockRecorder) CreateProfessionalInformation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfessionalInformation", reflect.TypeOf((*MockStore)(nil).CreateProfessionalInformation), arg0, arg1)
}

// CreateProfessionalUser mocks base method.
func (m *MockStore) CreateProfessionalUser(arg0 context.Context, arg1 db.CreateProfessionalUserParams) (db.ProfessionalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfessionalUser", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfessionalUser indicates an expected call of CreateProfessionalUser.
func (mr *MockStoreMockRecorder) CreateProfessionalUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfessionalUser", reflect.TypeOf((*MockStore)(nil).CreateProfessionalUser), arg0, arg1)
}

// CreateResponsibleStudent mocks base method.
func (m *MockStore) CreateResponsibleStudent(arg0 context.Context, arg1 db.CreateResponsibleStudentParams) (db.ResponsibleStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResponsibleStudent", arg0, arg1)
	ret0, _ := ret[0].(db.ResponsibleStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResponsibleStudent indicates an expected call of CreateResponsibleStudent.
func (mr *MockStoreMockRecorder) CreateResponsibleStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponsibleStudent", reflect.TypeOf((*MockStore)(nil).CreateResponsibleStudent), arg0, arg1)
}

// CreateStudentUser mocks base method.
func (m *MockStore) CreateStudentUser(arg0 context.Context, arg1 db.CreateStudentUserParams) (db.StudentUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudentUser", arg0, arg1)
	ret0, _ := ret[0].(db.StudentUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudentUser indicates an expected call of CreateStudentUser.
func (mr *MockStoreMockRecorder) CreateStudentUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudentUser", reflect.TypeOf((*MockStore)(nil).CreateStudentUser), arg0, arg1)
}

// CreateSubjectMatter mocks base method.
func (m *MockStore) CreateSubjectMatter(arg0 context.Context, arg1 db.CreateSubjectMatterParams) (db.SubjectMatter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubjectMatter", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubjectMatter indicates an expected call of CreateSubjectMatter.
func (mr *MockStoreMockRecorder) CreateSubjectMatter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubjectMatter", reflect.TypeOf((*MockStore)(nil).CreateSubjectMatter), arg0, arg1)
}

// CreateSubjectMatterClass mocks base method.
func (m *MockStore) CreateSubjectMatterClass(arg0 context.Context, arg1 db.CreateSubjectMatterClassParams) (db.SubjectMatterClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubjectMatterClass", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatterClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubjectMatterClass indicates an expected call of CreateSubjectMatterClass.
func (mr *MockStoreMockRecorder) CreateSubjectMatterClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubjectMatterClass", reflect.TypeOf((*MockStore)(nil).CreateSubjectMatterClass), arg0, arg1)
}

// DeletePhone mocks base method.
func (m *MockStore) DeletePhone(arg0 context.Context, arg1 int64) (db.Phone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhone", arg0, arg1)
	ret0, _ := ret[0].(db.Phone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePhone indicates an expected call of DeletePhone.
func (mr *MockStoreMockRecorder) DeletePhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhone", reflect.TypeOf((*MockStore)(nil).DeletePhone), arg0, arg1)
}

// DeleteProfessionalInformation mocks base method.
func (m *MockStore) DeleteProfessionalInformation(arg0 context.Context, arg1 int64) (db.ProfessionalInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfessionalInformation", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfessionalInformation indicates an expected call of DeleteProfessionalInformation.
func (mr *MockStoreMockRecorder) DeleteProfessionalInformation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfessionalInformation", reflect.TypeOf((*MockStore)(nil).DeleteProfessionalInformation), arg0, arg1)
}

// DeleteProfessionalUser mocks base method.
func (m *MockStore) DeleteProfessionalUser(arg0 context.Context, arg1 int64) (db.ProfessionalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfessionalUser", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfessionalUser indicates an expected call of DeleteProfessionalUser.
func (mr *MockStoreMockRecorder) DeleteProfessionalUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfessionalUser", reflect.TypeOf((*MockStore)(nil).DeleteProfessionalUser), arg0, arg1)
}

// DeleteResponsibleStudent mocks base method.
func (m *MockStore) DeleteResponsibleStudent(arg0 context.Context, arg1 int64) (db.ResponsibleStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResponsibleStudent", arg0, arg1)
	ret0, _ := ret[0].(db.ResponsibleStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResponsibleStudent indicates an expected call of DeleteResponsibleStudent.
func (mr *MockStoreMockRecorder) DeleteResponsibleStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResponsibleStudent", reflect.TypeOf((*MockStore)(nil).DeleteResponsibleStudent), arg0, arg1)
}

// DeleteStudentUser mocks base method.
func (m *MockStore) DeleteStudentUser(arg0 context.Context, arg1 int64) (db.StudentUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudentUser", arg0, arg1)
	ret0, _ := ret[0].(db.StudentUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudentUser indicates an expected call of DeleteStudentUser.
func (mr *MockStoreMockRecorder) DeleteStudentUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudentUser", reflect.TypeOf((*MockStore)(nil).DeleteStudentUser), arg0, arg1)
}

// DeleteSubjectMatter mocks base method.
func (m *MockStore) DeleteSubjectMatter(arg0 context.Context, arg1 int64) (db.SubjectMatter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubjectMatter", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubjectMatter indicates an expected call of DeleteSubjectMatter.
func (mr *MockStoreMockRecorder) DeleteSubjectMatter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubjectMatter", reflect.TypeOf((*MockStore)(nil).DeleteSubjectMatter), arg0, arg1)
}

// DeleteSubjectMatterClass mocks base method.
func (m *MockStore) DeleteSubjectMatterClass(arg0 context.Context, arg1 int64) (db.SubjectMatterClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubjectMatterClass", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatterClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubjectMatterClass indicates an expected call of DeleteSubjectMatterClass.
func (mr *MockStoreMockRecorder) DeleteSubjectMatterClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubjectMatterClass", reflect.TypeOf((*MockStore)(nil).DeleteSubjectMatterClass), arg0, arg1)
}

// GetPhone mocks base method.
func (m *MockStore) GetPhone(arg0 context.Context, arg1 int64) (db.Phone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhone", arg0, arg1)
	ret0, _ := ret[0].(db.Phone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhone indicates an expected call of GetPhone.
func (mr *MockStoreMockRecorder) GetPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhone", reflect.TypeOf((*MockStore)(nil).GetPhone), arg0, arg1)
}

// GetProfessionalInformation mocks base method.
func (m *MockStore) GetProfessionalInformation(arg0 context.Context, arg1 int64) (db.ProfessionalInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfessionalInformation", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfessionalInformation indicates an expected call of GetProfessionalInformation.
func (mr *MockStoreMockRecorder) GetProfessionalInformation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfessionalInformation", reflect.TypeOf((*MockStore)(nil).GetProfessionalInformation), arg0, arg1)
}

// GetProfessionalUser mocks base method.
func (m *MockStore) GetProfessionalUser(arg0 context.Context, arg1 int64) (db.ProfessionalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfessionalUser", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfessionalUser indicates an expected call of GetProfessionalUser.
func (mr *MockStoreMockRecorder) GetProfessionalUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfessionalUser", reflect.TypeOf((*MockStore)(nil).GetProfessionalUser), arg0, arg1)
}

// GetResponsibleStudent mocks base method.
func (m *MockStore) GetResponsibleStudent(arg0 context.Context, arg1 int64) (db.ResponsibleStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsibleStudent", arg0, arg1)
	ret0, _ := ret[0].(db.ResponsibleStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsibleStudent indicates an expected call of GetResponsibleStudent.
func (mr *MockStoreMockRecorder) GetResponsibleStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsibleStudent", reflect.TypeOf((*MockStore)(nil).GetResponsibleStudent), arg0, arg1)
}

// GetStudentUser mocks base method.
func (m *MockStore) GetStudentUser(arg0 context.Context, arg1 int64) (db.StudentUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentUser", arg0, arg1)
	ret0, _ := ret[0].(db.StudentUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentUser indicates an expected call of GetStudentUser.
func (mr *MockStoreMockRecorder) GetStudentUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentUser", reflect.TypeOf((*MockStore)(nil).GetStudentUser), arg0, arg1)
}

// GetSubjectMatter mocks base method.
func (m *MockStore) GetSubjectMatter(arg0 context.Context, arg1 int64) (db.SubjectMatter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectMatter", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectMatter indicates an expected call of GetSubjectMatter.
func (mr *MockStoreMockRecorder) GetSubjectMatter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectMatter", reflect.TypeOf((*MockStore)(nil).GetSubjectMatter), arg0, arg1)
}

// GetSubjectMatterClass mocks base method.
func (m *MockStore) GetSubjectMatterClass(arg0 context.Context, arg1 int64) (db.SubjectMatterClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectMatterClass", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatterClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectMatterClass indicates an expected call of GetSubjectMatterClass.
func (mr *MockStoreMockRecorder) GetSubjectMatterClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectMatterClass", reflect.TypeOf((*MockStore)(nil).GetSubjectMatterClass), arg0, arg1)
}

// ListPhone mocks base method.
func (m *MockStore) ListPhone(arg0 context.Context, arg1 db.ListPhoneParams) ([]db.Phone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhone", arg0, arg1)
	ret0, _ := ret[0].([]db.Phone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhone indicates an expected call of ListPhone.
func (mr *MockStoreMockRecorder) ListPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhone", reflect.TypeOf((*MockStore)(nil).ListPhone), arg0, arg1)
}

// ListProfessionalInformation mocks base method.
func (m *MockStore) ListProfessionalInformation(arg0 context.Context, arg1 db.ListProfessionalInformationParams) ([]db.ProfessionalInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfessionalInformation", arg0, arg1)
	ret0, _ := ret[0].([]db.ProfessionalInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfessionalInformation indicates an expected call of ListProfessionalInformation.
func (mr *MockStoreMockRecorder) ListProfessionalInformation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfessionalInformation", reflect.TypeOf((*MockStore)(nil).ListProfessionalInformation), arg0, arg1)
}

// ListProfessionalInformationByUser mocks base method.
func (m *MockStore) ListProfessionalInformationByUser(arg0 context.Context, arg1 int64) ([]db.ProfessionalInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfessionalInformationByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.ProfessionalInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfessionalInformationByUser indicates an expected call of ListProfessionalInformationByUser.
func (mr *MockStoreMockRecorder) ListProfessionalInformationByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfessionalInformationByUser", reflect.TypeOf((*MockStore)(nil).ListProfessionalInformationByUser), arg0, arg1)
}

// ListProfessionalUser mocks base method.
func (m *MockStore) ListProfessionalUser(arg0 context.Context, arg1 db.ListProfessionalUserParams) ([]db.ProfessionalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfessionalUser", arg0, arg1)
	ret0, _ := ret[0].([]db.ProfessionalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfessionalUser indicates an expected call of ListProfessionalUser.
func (mr *MockStoreMockRecorder) ListProfessionalUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfessionalUser", reflect.TypeOf((*MockStore)(nil).ListProfessionalUser), arg0, arg1)
}

// ListResponsibleStudent mocks base method.
func (m *MockStore) ListResponsibleStudent(arg0 context.Context, arg1 db.ListResponsibleStudentParams) ([]db.ResponsibleStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResponsibleStudent", arg0, arg1)
	ret0, _ := ret[0].([]db.ResponsibleStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResponsibleStudent indicates an expected call of ListResponsibleStudent.
func (mr *MockStoreMockRecorder) ListResponsibleStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponsibleStudent", reflect.TypeOf((*MockStore)(nil).ListResponsibleStudent), arg0, arg1)
}

// ListStudentUser mocks base method.
func (m *MockStore) ListStudentUser(arg0 context.Context, arg1 db.ListStudentUserParams) ([]db.StudentUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudentUser", arg0, arg1)
	ret0, _ := ret[0].([]db.StudentUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudentUser indicates an expected call of ListStudentUser.
func (mr *MockStoreMockRecorder) ListStudentUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudentUser", reflect.TypeOf((*MockStore)(nil).ListStudentUser), arg0, arg1)
}

// ListSubjectMatter mocks base method.
func (m *MockStore) ListSubjectMatter(arg0 context.Context, arg1 db.ListSubjectMatterParams) ([]db.SubjectMatter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjectMatter", arg0, arg1)
	ret0, _ := ret[0].([]db.SubjectMatter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjectMatter indicates an expected call of ListSubjectMatter.
func (mr *MockStoreMockRecorder) ListSubjectMatter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjectMatter", reflect.TypeOf((*MockStore)(nil).ListSubjectMatter), arg0, arg1)
}

// ListSubjectMatterClass mocks base method.
func (m *MockStore) ListSubjectMatterClass(arg0 context.Context, arg1 db.ListSubjectMatterClassParams) ([]db.SubjectMatterClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjectMatterClass", arg0, arg1)
	ret0, _ := ret[0].([]db.SubjectMatterClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjectMatterClass indicates an expected call of ListSubjectMatterClass.
func (mr *MockStoreMockRecorder) ListSubjectMatterClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjectMatterClass", reflect.TypeOf((*MockStore)(nil).ListSubjectMatterClass), arg0, arg1)
}

// UpdatePhone mocks base method.
func (m *MockStore) UpdatePhone(arg0 context.Context, arg1 db.UpdatePhoneParams) (db.Phone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhone", arg0, arg1)
	ret0, _ := ret[0].(db.Phone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhone indicates an expected call of UpdatePhone.
func (mr *MockStoreMockRecorder) UpdatePhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhone", reflect.TypeOf((*MockStore)(nil).UpdatePhone), arg0, arg1)
}

// UpdateProfessionalInformation mocks base method.
func (m *MockStore) UpdateProfessionalInformation(arg0 context.Context, arg1 db.UpdateProfessionalInformationParams) (db.ProfessionalInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfessionalInformation", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfessionalInformation indicates an expected call of UpdateProfessionalInformation.
func (mr *MockStoreMockRecorder) UpdateProfessionalInformation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfessionalInformation", reflect.TypeOf((*MockStore)(nil).UpdateProfessionalInformation), arg0, arg1)
}

// UpdateProfessionalUser mocks base method.
func (m *MockStore) UpdateProfessionalUser(arg0 context.Context, arg1 db.UpdateProfessionalUserParams) (db.ProfessionalUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfessionalUser", arg0, arg1)
	ret0, _ := ret[0].(db.ProfessionalUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfessionalUser indicates an expected call of UpdateProfessionalUser.
func (mr *MockStoreMockRecorder) UpdateProfessionalUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfessionalUser", reflect.TypeOf((*MockStore)(nil).UpdateProfessionalUser), arg0, arg1)
}

// UpdateResponsibleStudent mocks base method.
func (m *MockStore) UpdateResponsibleStudent(arg0 context.Context, arg1 db.UpdateResponsibleStudentParams) (db.ResponsibleStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResponsibleStudent", arg0, arg1)
	ret0, _ := ret[0].(db.ResponsibleStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResponsibleStudent indicates an expected call of UpdateResponsibleStudent.
func (mr *MockStoreMockRecorder) UpdateResponsibleStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResponsibleStudent", reflect.TypeOf((*MockStore)(nil).UpdateResponsibleStudent), arg0, arg1)
}

// UpdateStudentUser mocks base method.
func (m *MockStore) UpdateStudentUser(arg0 context.Context, arg1 db.UpdateStudentUserParams) (db.StudentUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudentUser", arg0, arg1)
	ret0, _ := ret[0].(db.StudentUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudentUser indicates an expected call of UpdateStudentUser.
func (mr *MockStoreMockRecorder) UpdateStudentUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudentUser", reflect.TypeOf((*MockStore)(nil).UpdateStudentUser), arg0, arg1)
}

// UpdateSubjectMatter mocks base method.
func (m *MockStore) UpdateSubjectMatter(arg0 context.Context, arg1 db.UpdateSubjectMatterParams) (db.SubjectMatter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubjectMatter", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubjectMatter indicates an expected call of UpdateSubjectMatter.
func (mr *MockStoreMockRecorder) UpdateSubjectMatter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubjectMatter", reflect.TypeOf((*MockStore)(nil).UpdateSubjectMatter), arg0, arg1)
}

// UpdateSubjectMatterClass mocks base method.
func (m *MockStore) UpdateSubjectMatterClass(arg0 context.Context, arg1 db.UpdateSubjectMatterClassParams) (db.SubjectMatterClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubjectMatterClass", arg0, arg1)
	ret0, _ := ret[0].(db.SubjectMatterClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubjectMatterClass indicates an expected call of UpdateSubjectMatterClass.
func (mr *MockStoreMockRecorder) UpdateSubjectMatterClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubjectMatterClass", reflect.TypeOf((*MockStore)(nil).UpdateSubjectMatterClass), arg0, arg1)
}
