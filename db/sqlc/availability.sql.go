// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: availability.sql

package db

import (
	"context"
)

const addAvailability = `-- name: AddAvailability :one
INSERT INTO "availability" (
  date,
  start,
  end_time,
  is_available,
  user_id,
  username
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, date, start, end_time, is_available, user_id, username
`

type AddAvailabilityParams struct {
	Date        string `json:"date"`
	Start       string `json:"start"`
	EndTime     string `json:"end_time"`
	IsAvailable bool   `json:"is_available"`
	UserID      int64  `json:"user_id"`
	Username    string `json:"username"`
}

func (q *Queries) AddAvailability(ctx context.Context, arg AddAvailabilityParams) (Availability, error) {
	row := q.queryRow(ctx, q.addAvailabilityStmt, addAvailability,
		arg.Date,
		arg.Start,
		arg.EndTime,
		arg.IsAvailable,
		arg.UserID,
		arg.Username,
	)
	var i Availability
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Start,
		&i.EndTime,
		&i.IsAvailable,
		&i.UserID,
		&i.Username,
	)
	return i, err
}

const deleteAvailability = `-- name: DeleteAvailability :one
DELETE FROM  "availability"
WHERE id = $1
RETURNING id, date, start, end_time, is_available, user_id, username
`

func (q *Queries) DeleteAvailability(ctx context.Context, id int64) (Availability, error) {
	row := q.queryRow(ctx, q.deleteAvailabilityStmt, deleteAvailability, id)
	var i Availability
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Start,
		&i.EndTime,
		&i.IsAvailable,
		&i.UserID,
		&i.Username,
	)
	return i, err
}

const getAvailability = `-- name: GetAvailability :one
SELECT id, date, start, end_time, is_available, user_id, username FROM  "availability"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAvailability(ctx context.Context, id int64) (Availability, error) {
	row := q.queryRow(ctx, q.getAvailabilityStmt, getAvailability, id)
	var i Availability
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Start,
		&i.EndTime,
		&i.IsAvailable,
		&i.UserID,
		&i.Username,
	)
	return i, err
}

const listAvailability = `-- name: ListAvailability :many
SELECT id, date, start, end_time, is_available, user_id, username FROM  "availability"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAvailabilityParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAvailability(ctx context.Context, arg ListAvailabilityParams) ([]Availability, error) {
	rows, err := q.query(ctx, q.listAvailabilityStmt, listAvailability, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Availability{}
	for rows.Next() {
		var i Availability
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Start,
			&i.EndTime,
			&i.IsAvailable,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
