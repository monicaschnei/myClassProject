// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: calendar.sql

package db

import (
	"context"
	"database/sql"
)

const createCalendar = `-- name: CreateCalendar :one
INSERT INTO "calendar" (
  "subjectMatter_id",
  time,
  date,
  available,
  filled_student_id,
  "professionalUser_id"
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, "subjectMatter_id", time, date, available, filled_student_id, "professionalUser_id"
`

type CreateCalendarParams struct {
	SubjectMatterID    int32        `json:"subjectMatter_id"`
	Time               sql.NullTime `json:"time"`
	Date               sql.NullTime `json:"date"`
	Available          sql.NullBool `json:"available"`
	FilledStudentID    int32        `json:"filled_student_id"`
	ProfessionalUserID int32        `json:"professionalUser_id"`
}

func (q *Queries) CreateCalendar(ctx context.Context, arg CreateCalendarParams) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, createCalendar,
		arg.SubjectMatterID,
		arg.Time,
		arg.Date,
		arg.Available,
		arg.FilledStudentID,
		arg.ProfessionalUserID,
	)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.SubjectMatterID,
		&i.Time,
		&i.Date,
		&i.Available,
		&i.FilledStudentID,
		&i.ProfessionalUserID,
	)
	return i, err
}

const deleteCalendar = `-- name: DeleteCalendar :one
DELETE FROM  "calendar"
WHERE id = $1
RETURNING id, "subjectMatter_id", time, date, available, filled_student_id, "professionalUser_id"
`

func (q *Queries) DeleteCalendar(ctx context.Context, id int64) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, deleteCalendar, id)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.SubjectMatterID,
		&i.Time,
		&i.Date,
		&i.Available,
		&i.FilledStudentID,
		&i.ProfessionalUserID,
	)
	return i, err
}

const getCalendar = `-- name: GetCalendar :one
SELECT id, "subjectMatter_id", time, date, available, filled_student_id, "professionalUser_id" FROM  "calendar"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCalendar(ctx context.Context, id int64) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, getCalendar, id)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.SubjectMatterID,
		&i.Time,
		&i.Date,
		&i.Available,
		&i.FilledStudentID,
		&i.ProfessionalUserID,
	)
	return i, err
}

const listCalendar = `-- name: ListCalendar :many
SELECT id, "subjectMatter_id", time, date, available, filled_student_id, "professionalUser_id" FROM  "calendar"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCalendarParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCalendar(ctx context.Context, arg ListCalendarParams) ([]Calendar, error) {
	rows, err := q.db.QueryContext(ctx, listCalendar, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Calendar
	for rows.Next() {
		var i Calendar
		if err := rows.Scan(
			&i.ID,
			&i.SubjectMatterID,
			&i.Time,
			&i.Date,
			&i.Available,
			&i.FilledStudentID,
			&i.ProfessionalUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCalendar = `-- name: UpdateCalendar :one
UPDATE  "calendar"
    set  time = $2,
    date = $3,
    available = $4
WHERE id = $1
RETURNING id, "subjectMatter_id", time, date, available, filled_student_id, "professionalUser_id"
`

type UpdateCalendarParams struct {
	ID        int64        `json:"id"`
	Time      sql.NullTime `json:"time"`
	Date      sql.NullTime `json:"date"`
	Available sql.NullBool `json:"available"`
}

func (q *Queries) UpdateCalendar(ctx context.Context, arg UpdateCalendarParams) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, updateCalendar,
		arg.ID,
		arg.Time,
		arg.Date,
		arg.Available,
	)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.SubjectMatterID,
		&i.Time,
		&i.Date,
		&i.Available,
		&i.FilledStudentID,
		&i.ProfessionalUserID,
	)
	return i, err
}
