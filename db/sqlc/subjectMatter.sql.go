// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: subjectMatter.sql

package db

import (
	"context"
	"database/sql"
)

const createSubjectMatter = `-- name: CreateSubjectMatter :one
INSERT INTO "subjectMatter" (
    title,
    category,
    abstract
) VALUES (
  $1, $2, $3
)
RETURNING id, title, created_at, category, abstract
`

type CreateSubjectMatterParams struct {
	Title    string         `json:"title"`
	Category string         `json:"category"`
	Abstract sql.NullString `json:"abstract"`
}

func (q *Queries) CreateSubjectMatter(ctx context.Context, arg CreateSubjectMatterParams) (SubjectMatter, error) {
	row := q.db.QueryRowContext(ctx, createSubjectMatter, arg.Title, arg.Category, arg.Abstract)
	var i SubjectMatter
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.Category,
		&i.Abstract,
	)
	return i, err
}

const deleteSubjectMatter = `-- name: DeleteSubjectMatter :one
DELETE FROM "subjectMatter"
WHERE id = $1
RETURNING id, title, created_at, category, abstract
`

func (q *Queries) DeleteSubjectMatter(ctx context.Context, id int64) (SubjectMatter, error) {
	row := q.db.QueryRowContext(ctx, deleteSubjectMatter, id)
	var i SubjectMatter
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.Category,
		&i.Abstract,
	)
	return i, err
}

const getSubjectMatter = `-- name: GetSubjectMatter :one
SELECT id, title, created_at, category, abstract FROM "subjectMatter" 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubjectMatter(ctx context.Context, id int64) (SubjectMatter, error) {
	row := q.db.QueryRowContext(ctx, getSubjectMatter, id)
	var i SubjectMatter
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.Category,
		&i.Abstract,
	)
	return i, err
}

const listSubjectMatter = `-- name: ListSubjectMatter :many
SELECT id, title, created_at, category, abstract FROM "subjectMatter" 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSubjectMatterParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubjectMatter(ctx context.Context, arg ListSubjectMatterParams) ([]SubjectMatter, error) {
	rows, err := q.db.QueryContext(ctx, listSubjectMatter, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubjectMatter
	for rows.Next() {
		var i SubjectMatter
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.Category,
			&i.Abstract,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubjectMatter = `-- name: UpdateSubjectMatter :one
UPDATE "subjectMatter"
    set title = $2,
    category = $3,
    abstract = $4
WHERE id = $1
RETURNING id, title, created_at, category, abstract
`

type UpdateSubjectMatterParams struct {
	ID       int64          `json:"id"`
	Title    string         `json:"title"`
	Category string         `json:"category"`
	Abstract sql.NullString `json:"abstract"`
}

func (q *Queries) UpdateSubjectMatter(ctx context.Context, arg UpdateSubjectMatterParams) (SubjectMatter, error) {
	row := q.db.QueryRowContext(ctx, updateSubjectMatter,
		arg.ID,
		arg.Title,
		arg.Category,
		arg.Abstract,
	)
	var i SubjectMatter
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.Category,
		&i.Abstract,
	)
	return i, err
}
