// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: subjectMatterClass.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSubjectMatterClass = `-- name: CreateSubjectMatterClass :one
INSERT INTO "subjectMatterClass" (
"subjectMatter_id",
professional_id,
durantion,
enrollment_date,
enrollment_time,
cancellation,
cancellation_reason,
student_attendence,
study_material,
testing_exam
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, created_at, "subjectMatter_id", professional_id, durantion, enrollment_date, enrollment_time, cancellation, cancellation_reason, student_attendence, study_material, testing_exam
`

type CreateSubjectMatterClassParams struct {
	SubjectMatterID    int32          `json:"subjectMatter_id"`
	ProfessionalID     int32          `json:"professional_id"`
	Durantion          int32          `json:"durantion"`
	EnrollmentDate     time.Time      `json:"enrollment_date"`
	EnrollmentTime     time.Time      `json:"enrollment_time"`
	Cancellation       sql.NullBool   `json:"cancellation"`
	CancellationReason sql.NullString `json:"cancellation_reason"`
	StudentAttendence  sql.NullBool   `json:"student_attendence"`
	StudyMaterial      sql.NullString `json:"study_material"`
	TestingExam        sql.NullString `json:"testing_exam"`
}

func (q *Queries) CreateSubjectMatterClass(ctx context.Context, arg CreateSubjectMatterClassParams) (SubjectMatterClass, error) {
	row := q.db.QueryRowContext(ctx, createSubjectMatterClass,
		arg.SubjectMatterID,
		arg.ProfessionalID,
		arg.Durantion,
		arg.EnrollmentDate,
		arg.EnrollmentTime,
		arg.Cancellation,
		arg.CancellationReason,
		arg.StudentAttendence,
		arg.StudyMaterial,
		arg.TestingExam,
	)
	var i SubjectMatterClass
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SubjectMatterID,
		&i.ProfessionalID,
		&i.Durantion,
		&i.EnrollmentDate,
		&i.EnrollmentTime,
		&i.Cancellation,
		&i.CancellationReason,
		&i.StudentAttendence,
		&i.StudyMaterial,
		&i.TestingExam,
	)
	return i, err
}

const deleteSubjectMatterClass = `-- name: DeleteSubjectMatterClass :one
DELETE FROM "subjectMatterClass"
WHERE id = $1
RETURNING id, created_at, "subjectMatter_id", professional_id, durantion, enrollment_date, enrollment_time, cancellation, cancellation_reason, student_attendence, study_material, testing_exam
`

func (q *Queries) DeleteSubjectMatterClass(ctx context.Context, id int64) (SubjectMatterClass, error) {
	row := q.db.QueryRowContext(ctx, deleteSubjectMatterClass, id)
	var i SubjectMatterClass
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SubjectMatterID,
		&i.ProfessionalID,
		&i.Durantion,
		&i.EnrollmentDate,
		&i.EnrollmentTime,
		&i.Cancellation,
		&i.CancellationReason,
		&i.StudentAttendence,
		&i.StudyMaterial,
		&i.TestingExam,
	)
	return i, err
}

const getSubjectMatterClass = `-- name: GetSubjectMatterClass :one
SELECT id, created_at, "subjectMatter_id", professional_id, durantion, enrollment_date, enrollment_time, cancellation, cancellation_reason, student_attendence, study_material, testing_exam FROM "subjectMatterClass" 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubjectMatterClass(ctx context.Context, id int64) (SubjectMatterClass, error) {
	row := q.db.QueryRowContext(ctx, getSubjectMatterClass, id)
	var i SubjectMatterClass
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SubjectMatterID,
		&i.ProfessionalID,
		&i.Durantion,
		&i.EnrollmentDate,
		&i.EnrollmentTime,
		&i.Cancellation,
		&i.CancellationReason,
		&i.StudentAttendence,
		&i.StudyMaterial,
		&i.TestingExam,
	)
	return i, err
}

const listSubjectMatterClass = `-- name: ListSubjectMatterClass :many
SELECT id, created_at, "subjectMatter_id", professional_id, durantion, enrollment_date, enrollment_time, cancellation, cancellation_reason, student_attendence, study_material, testing_exam FROM "subjectMatterClass" 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSubjectMatterClassParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubjectMatterClass(ctx context.Context, arg ListSubjectMatterClassParams) ([]SubjectMatterClass, error) {
	rows, err := q.db.QueryContext(ctx, listSubjectMatterClass, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubjectMatterClass
	for rows.Next() {
		var i SubjectMatterClass
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.SubjectMatterID,
			&i.ProfessionalID,
			&i.Durantion,
			&i.EnrollmentDate,
			&i.EnrollmentTime,
			&i.Cancellation,
			&i.CancellationReason,
			&i.StudentAttendence,
			&i.StudyMaterial,
			&i.TestingExam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubjectMatterClass = `-- name: UpdateSubjectMatterClass :one
UPDATE "subjectMatterClass"
    set durantion = $2,
    enrollment_date = $3,
    enrollment_time = $4,
    study_material = $5,
    testing_exam = $6
WHERE id = $1
RETURNING id, created_at, "subjectMatter_id", professional_id, durantion, enrollment_date, enrollment_time, cancellation, cancellation_reason, student_attendence, study_material, testing_exam
`

type UpdateSubjectMatterClassParams struct {
	ID             int64          `json:"id"`
	Durantion      int32          `json:"durantion"`
	EnrollmentDate time.Time      `json:"enrollment_date"`
	EnrollmentTime time.Time      `json:"enrollment_time"`
	StudyMaterial  sql.NullString `json:"study_material"`
	TestingExam    sql.NullString `json:"testing_exam"`
}

func (q *Queries) UpdateSubjectMatterClass(ctx context.Context, arg UpdateSubjectMatterClassParams) (SubjectMatterClass, error) {
	row := q.db.QueryRowContext(ctx, updateSubjectMatterClass,
		arg.ID,
		arg.Durantion,
		arg.EnrollmentDate,
		arg.EnrollmentTime,
		arg.StudyMaterial,
		arg.TestingExam,
	)
	var i SubjectMatterClass
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SubjectMatterID,
		&i.ProfessionalID,
		&i.Durantion,
		&i.EnrollmentDate,
		&i.EnrollmentTime,
		&i.Cancellation,
		&i.CancellationReason,
		&i.StudentAttendence,
		&i.StudyMaterial,
		&i.TestingExam,
	)
	return i, err
}
