// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: responsibleStudent.sql

package db

import (
	"context"
	"time"
)

const createResponsibleStudent = `-- name: CreateResponsibleStudent :one
INSERT INTO "responsibleStudent" (
name,
gender,
email,
date_of_birth,
username,
cpf,
hashed_password,
updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, username, name, gender, email, date_of_birth, cpf, created_at, updated_at, password_changed_at, hashed_password
`

type CreateResponsibleStudentParams struct {
	Name           string    `json:"name"`
	Gender         string    `json:"gender"`
	Email          string    `json:"email"`
	DateOfBirth    time.Time `json:"date_of_birth"`
	Username       string    `json:"username"`
	Cpf            string    `json:"cpf"`
	HashedPassword string    `json:"hashed_password"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) CreateResponsibleStudent(ctx context.Context, arg CreateResponsibleStudentParams) (ResponsibleStudent, error) {
	row := q.queryRow(ctx, q.createResponsibleStudentStmt, createResponsibleStudent,
		arg.Name,
		arg.Gender,
		arg.Email,
		arg.DateOfBirth,
		arg.Username,
		arg.Cpf,
		arg.HashedPassword,
		arg.UpdatedAt,
	)
	var i ResponsibleStudent
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Gender,
		&i.Email,
		&i.DateOfBirth,
		&i.Cpf,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.HashedPassword,
	)
	return i, err
}

const deleteResponsibleStudent = `-- name: DeleteResponsibleStudent :one
DELETE FROM "responsibleStudent"
WHERE id = $1
RETURNING id, username, name, gender, email, date_of_birth, cpf, created_at, updated_at, password_changed_at, hashed_password
`

func (q *Queries) DeleteResponsibleStudent(ctx context.Context, id int64) (ResponsibleStudent, error) {
	row := q.queryRow(ctx, q.deleteResponsibleStudentStmt, deleteResponsibleStudent, id)
	var i ResponsibleStudent
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Gender,
		&i.Email,
		&i.DateOfBirth,
		&i.Cpf,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.HashedPassword,
	)
	return i, err
}

const getResponsibleStudent = `-- name: GetResponsibleStudent :one
SELECT id, username, name, gender, email, date_of_birth, cpf, created_at, updated_at, password_changed_at, hashed_password FROM "responsibleStudent" 
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetResponsibleStudent(ctx context.Context, username string) (ResponsibleStudent, error) {
	row := q.queryRow(ctx, q.getResponsibleStudentStmt, getResponsibleStudent, username)
	var i ResponsibleStudent
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Gender,
		&i.Email,
		&i.DateOfBirth,
		&i.Cpf,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.HashedPassword,
	)
	return i, err
}

const listResponsibleStudent = `-- name: ListResponsibleStudent :many
SELECT id, username, name, gender, email, date_of_birth, cpf, created_at, updated_at, password_changed_at, hashed_password FROM "responsibleStudent" 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListResponsibleStudentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListResponsibleStudent(ctx context.Context, arg ListResponsibleStudentParams) ([]ResponsibleStudent, error) {
	rows, err := q.query(ctx, q.listResponsibleStudentStmt, listResponsibleStudent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResponsibleStudent{}
	for rows.Next() {
		var i ResponsibleStudent
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Gender,
			&i.Email,
			&i.DateOfBirth,
			&i.Cpf,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PasswordChangedAt,
			&i.HashedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResponsibleStudent = `-- name: UpdateResponsibleStudent :one
UPDATE "responsibleStudent"
    set name = $2,
    email = $3
WHERE id = $1
RETURNING id, username, name, gender, email, date_of_birth, cpf, created_at, updated_at, password_changed_at, hashed_password
`

type UpdateResponsibleStudentParams struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateResponsibleStudent(ctx context.Context, arg UpdateResponsibleStudentParams) (ResponsibleStudent, error) {
	row := q.queryRow(ctx, q.updateResponsibleStudentStmt, updateResponsibleStudent, arg.ID, arg.Name, arg.Email)
	var i ResponsibleStudent
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Gender,
		&i.Email,
		&i.DateOfBirth,
		&i.Cpf,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.HashedPassword,
	)
	return i, err
}
